import { forwardRef, useImperativeHandle } from "react";

import { yupResolver } from "@hookform/resolvers/yup";
import { Alert, Box, CircularProgress, Grid, Typography } from "@mui/material";
import {
  DEFAULT_GENERAL_PARAMS,
  DEFAULT_INVENTORY_PARAMS,
  DEFAULT_STORING_PARAMS,
} from "@shared/consts";
import { ICubeData, IParamsData } from "@shared/models";
import { useForm } from "react-hook-form";
import { useCube } from "src/context/hooks";

import {
  paramsSchema,
  GeneralParams,
  StoringParams,
  InventoryParams,
} from "../../GeneralData";

interface Props {
  error: string;
  loading: boolean;
}

const ParamsData = forwardRef(({ error, loading }: Props, ref) => {
  const { data, setData } = useCube();

  const {
    formState: { errors },
    register,
    getValues,
    control,
  } = useForm<Omit<IParamsData, "categories" | "drivers">>({
    resolver: yupResolver(paramsSchema),
    defaultValues: {
      generalParams: DEFAULT_GENERAL_PARAMS,
      storingParams: DEFAULT_STORING_PARAMS,
      inventoryParams: DEFAULT_INVENTORY_PARAMS,
    },
  });

  useImperativeHandle(ref, () => ({
    saveData: () => {
      const _paramsData: IParamsData = {
        generalParams: getValues(
          "generalParams"
        ) as IParamsData["generalParams"],
        storingParams: getValues(
          "storingParams"
        ) as IParamsData["storingParams"],
        inventoryParams: getValues(
          "inventoryParams"
        ) as IParamsData["inventoryParams"],
        categories: data!.paramsData.categories!,
        drivers: data!.paramsData.drivers!,
      };
      setData((prev) => ({
        ...(prev as ICubeData),
        paramsData: _paramsData,
      }));
    },
  }));

  if (error) {
    return <Alert severity="error">{error}</Alert>;
  }

  if (loading) {
    return (
      <Box m={8}>
        <Typography variant="body1" color="text.primary" mb={2}>
          <CircularProgress size={15} sx={{ mr: 2 }} /> Calculando datos...
        </Typography>
      </Box>
    );
  }

  return (
    <Grid container spacing={4} component="form">
      <Grid item xs={12} sm={6} md={4}>
        <Grid item xs={12} mb={2}>
          <Typography color="text.primary" variant="body1">
            Parámetros Generales
          </Typography>
        </Grid>
        <GeneralParams
          errors={errors}
          register={register}
          control={control}
          hideAutoGenerated
        />
      </Grid>
      <Grid item xs={12} sm={6} md={4}>
        <Grid item xs={12} mb={2}>
          <Typography color="text.primary" variant="body1">
            Parámetros de Almacenaje
          </Typography>
        </Grid>
        <StoringParams errors={errors} register={register} control={control} />
      </Grid>
      <Grid item xs={12} sm={6} md={4}>
        <Grid item xs={12} mb={2}>
          <Typography color="text.primary" variant="body1">
            Parámetros de Inventario
          </Typography>
        </Grid>
        <InventoryParams
          errors={errors}
          register={register}
          control={control}
          hideAutoGenerated
        />
      </Grid>
    </Grid>
  );
});

export default ParamsData;
